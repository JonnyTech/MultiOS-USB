# MultiOS-USB main config file
# https://gitlab.com/MultiOS-USB
# https://github.com/Mexit/MultiOS-USB

# Load modules
insmod fat
insmod ntfs
insmod udf
insmod part_msdos
insmod part_gpt
insmod regexp
insmod font

if [ "${grub_platform}" == "efi" ]; then
	# Unload modules
	rmmod tpm
fi

regexp -s dev '^(.*),' "$root"
probe --fs-uuid $root --set=rootuuid
set imgdevpath="/dev/disk/by-uuid/$rootuuid"
set pager=1
set iso_dir="/ISOs"
set os_dir="/os_files"
set theme_path="/MultiOS-USB/themes/MultiOS-USB/theme.txt"
export dev rootuuid imgdevpath iso_dir os_dir

if [ -e "$theme_path" ]; then
	set theme="$theme_path"
	export theme
fi

if loadfont unicode; then
	if [ "${grub_platform}" == "efi" ]; then
		set gfxmode=auto
		insmod efi_gop
		insmod efi_uga
	else
		insmod vbe
		insmod vga
		set gfxmode="1280x800;1280x720;1024x768;auto"
		set gfxpayload="1920x1080;1600x1200;1600x1050;1600x900;1440x900;1366x768;1280x1024;1280x800;1280x720;1024x768;auto"
	fi
	insmod all_video
	insmod gfxterm
	insmod gfxmenu
	insmod png
	export gfxmode gfxpayload
	terminal_output gfxterm
fi

function find_grub_cfg {
	submenu "Detect and boot from GRUB config file (grub.cfg) -->" {
		grubcfg_found=false

		insmod ext2
		insmod xfs
		insmod zfs
		insmod btrfs
		insmod jfs
		insmod reiserfs

		for grubcfg in (*,msdos*)/boot/grub*/grub.cfg (*,gpt*)/boot/grub*/grub.cfg ; do
		regexp --set=1:grubcfg_device '^\((.*)\)/' "${grubcfg}"
		if [ -e "${grubcfg}" ]; then
			grubcfg_found=true

			menuentry --class=linux "Try boot from: ${grubcfg}" "${grubcfg}" "${grubcfg_device}" {
				root="${3}"
				configfile "${2}"
			}
		fi
		done

		if [ "${grubcfg_found}" != true ]; then
			menuentry "GRUB config files (grub.cfg) not detected." { false }
		fi
	}
}

function LOOPBACK {
	if [ -e (loop) ]; then
		loopback --delete loop
	fi
	loopback loop "$1"
}

submenu "Auto-detect ISOs (Directory: $iso_dir) -->" {
	echo -n "Loading configuration files... "
	for cfgfile in /MultiOS-USB/config/*/*.cfg /MultiOS-USB/config_priv/*/*.cfg; do
		source "$cfgfile"
	done
}

submenu "Auto-detect other Operating Systems on this USB -->" {
	echo -n "Loading configuration files... "
	for cfgfile in /MultiOS-USB/config/*/*.cfgos /MultiOS-USB/config_priv/*/*.cfgos ; do
		source "$cfgfile"
	done
}

if [ "${grub_platform}" == "pc" ]; then
	submenu "Tools -->" {
		submenu "Detect Windows bootloaders -->" {
			bootmgr_found=false

			for bootmgr in (*,msdos*)/bootmgr (*,gpt*)/bootmgr ; do
			regexp --set=1:bootmgr_device '^\((.*)\)/' "${bootmgr}"
			if [ -e "${bootmgr}" ]; then
				bootmgr_found=true
				insmod ntldr

				menuentry --class=windows "Boot Windows from: ${bootmgr}" "${bootmgr}" "${bootmgr_device}" {
					root="${3}"
					ntldr "${2}"
				}
			fi
			done

			if [ "${bootmgr_found}" != true ]; then
				menuentry "Windows bootloaders not detected." { false }
			fi
		}

		# Menu: boot from GRUB config file
		find_grub_cfg

		file="/MultiOS-USB/tools/mt86plus_*/memtest64.bin"
		if [ -e ${file} ]; then
			menuentry "Memtest86+" {
				linux16 ${file}
			}
		fi

		menuentry "Boot from 1st Hard Disk" {
			set root=(hd1)
			chainloader +1
		}
		menuentry "Boot from 2nd Hard Disk" {
			set root=(hd2)
			chainloader +1
		}
		menuentry "Boot from 3rd Hard Disk" {
			set root=(hd3)
			chainloader +1
		}
	}
fi

if [ "${grub_platform}" == "efi" ]; then

	submenu "EFI Tools -->" {
		menuentry "Reboot to UEFI Firmware Setup" {
			fwsetup
		}

		if [ -e ($dev,gpt1)/efi/boot/mmx64.efi ]; then
			menuentry --class=efi "Add UEFI key or hash" {
				chainloader ($dev,gpt1)/efi/boot/mmx64.efi
			}
		fi

		if [ -e /MultiOS-USB/tools/efitools-*/KeyTool.efi ]; then
			menuentry --class=efi "Manage UEFI keys and hashes" {
				chainloader /MultiOS-USB/tools/efitools-*/KeyTool.efi
			}
		fi

		submenu "Detect EFI bootloaders -->" {
			efi_found=false

			for efi in (*,gpt*)/efi/*/*.efi (*,gpt*)/efi/*/*/*.efi (*,gpt*)/*.efi (*,gpt*)/*/*.efi ; do
			regexp --set=1:efi_device '^\((.*)\)/' "${efi}"
			if [ -e "${efi}" ]; then
				efi_found=true

				menuentry --class=efi "${efi}" "${efi_device}" {
					root="${2}"
					chainloader "${1}"
				}
			fi
			done

			if [ "${efi_found}" != true ]; then
				menuentry "No EFI files detected." { false }
			fi
		}

		# Menu: boot from GRUB config file
		find_grub_cfg

		file="/MultiOS-USB/tools/mt86plus_*/memtest64.efi"
		if [ -e ${file} ]; then
			menuentry --class=efi "Memtest86+ EFI" {
				chainloader ${file}
			}
		fi
	}

	submenu "Network bootable OS installers (DHCP) -->" {
		if net_bootp ; then
			source /MultiOS-USB/config/grub_netboot/main.cfgnet
		else
			echo -e "\n\nIf your network card is not detected,"
			echo -e "check the BIOS/UEFI settings to see"
			echo -e "if PXE/network card booting is enabled.\n"
		fi
	}
fi

submenu "GRUB2 options -->" {
	menuentry "Set terminal output to console" {
		terminal_output console
	}

	menuentry "Set terminal output to gfxterm" {
		terminal_output gfxterm
	}

	menuentry "List devices/partitions" {
		ls -l
		sleep --interruptible 9999
	}

	menuentry "Enable GRUB2's LVM support" {
		insmod lvm
	}

	menuentry "Enable GRUB2's RAID support" {
		insmod dm_nv
		insmod mdraid09_be
		insmod mdraid09
		insmod mdraid1x
		insmod raid5rec
		insmod raid6rec
	}

	menuentry "Enable GRUB2's PATA support (to work around BIOS bugs/limitations)" {
		insmod ata
		update_paths
	}

	menuentry "Enable GRUB2's USB support *experimental*" {
		insmod ohci
		insmod uhci
		insmod usbms
		update_paths
	}

	menuentry "Mount encrypted volumes (LUKS and geli)" {
		insmod luks
		insmod luks2
		insmod geli
		cryptomount -a
	}

	menuentry "Enable serial terminal" {
		serial
		terminal_input --append serial
		terminal_output --append serial
	}
}

menuentry "Reboot" --hotkey=R --class reboot { reboot }

menuentry "Power Off" --hotkey=P --class shutdown { halt }
